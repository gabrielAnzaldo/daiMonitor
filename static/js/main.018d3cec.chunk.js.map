{"version":3,"sources":["constants.js","components/StepOne.js","components/StepTwo.js","components/StepThree.js","components/StepFour.js","App.js","serviceWorker.js","index.js"],"names":["steps","title","description","Step","Steps","App","useState","current","setCurrent","progressDot","direction","map","item","index","StepDescription","key","className","length","type","onClick","message","success","style","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2QAKaA,EAAQ,CACnB,CACEC,MAAO,SACPC,YCNY,WACd,OACE,gDDMF,CACED,MAAO,SACPC,YEVY,WACd,OACE,gDFUF,CACED,MAAO,SACPC,YGdY,WACd,OACE,gDHcF,CACED,MAAO,SACPC,YIlBY,WACd,OACE,iDCCIC,G,MAASC,IAATD,MAmDOE,EAjDH,WAAO,IAAD,EACcC,mBAAS,GADvB,mBACTC,EADS,KACAC,EADA,KAWhB,OACE,oCACE,8BACE,kBAAC,IAAD,CAAOC,aAAW,EAACC,UAAU,WAAWH,QAASA,GAC9CP,EAAMW,KAAI,SAACC,EAAMC,GACd,IAAMC,EAAkBF,EAAKV,YAC7B,OAAO,kBAACC,EAAD,CACLY,IAAKH,EAAKX,MACVA,MAAOW,EAAKX,MACZC,YAAaW,IAAUN,GAAW,yBAAKS,UAAU,iBAAgB,kBAACF,EAAD,aAIzE,yBAAKE,UAAU,gBACZT,EAAUP,EAAMiB,OAAS,GACxB,kBAAC,IAAD,CAAQC,KAAK,UAAUC,QAvBpB,WACXX,EAAWD,EAAU,KAsBb,QAIDA,IAAYP,EAAMiB,OAAS,GAC1B,kBAAC,IAAD,CACEC,KAAK,UACLC,QAAS,kBAAMC,IAAQC,QAAQ,0BAFjC,QAODd,EAAU,GACT,kBAAC,IAAD,CAAQe,MAAO,CAAEC,OAAQ,SAAWJ,QAhCjC,WACXX,EAAWD,EAAU,KA+Bb,gBClCQiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrB,c","file":"static/js/main.018d3cec.chunk.js","sourcesContent":["import StepOne from './components/StepOne';\nimport StepTwo from './components/StepTwo';\nimport StepThree from './components/StepThree';\nimport StepFour from './components/StepFour';\n\nexport const steps = [\n  {\n    title: 'Paso 1',\n    description: StepOne,\n  },\n  {\n    title: 'Paso 2',\n    description: StepTwo,\n  },\n  {\n    title: 'Paso 3',\n    description: StepThree,\n  },\n  {\n    title: 'Paso 4',\n    description: StepFour,\n  },\n];\n","import React from 'react';\n\nconst StepOne = () => {\n  return(\n    <div>\n      soy el paso 1\n    </div>\n  );\n}\n\nexport default StepOne;\n","import React from 'react';\n\nconst StepTwo = () => {\n  return(\n    <div>\n      soy el paso 2\n    </div>\n  );\n}\n\nexport default StepTwo;\n","import React from 'react';\n\nconst StepOne = () => {\n  return(\n    <div>\n      soy el paso 3\n    </div>\n  );\n}\n\nexport default StepOne;\n","import React from 'react';\n\nconst StepOne = () => {\n  return(\n    <div>\n      soy el paso 4\n    </div>\n  );\n}\n\nexport default StepOne;\n","import React, { useState } from 'react';\nimport { Steps, Button, message } from 'antd';\nimport { steps } from './constants';\nimport './App.css';\n\nconst { Step } = Steps;\n\nconst App = () => {\n  const [current, setCurrent] = useState(0);\n\n  const next = () => {\n    setCurrent(current + 1);\n  };\n\n  const prev = () => {\n    setCurrent(current - 1);\n  };\n\n  return (\n    <>\n      <main>\n        <Steps progressDot direction=\"vertical\" current={current}>\n          {steps.map((item, index) => {\n              const StepDescription = item.description;\n              return <Step\n                key={item.title}\n                title={item.title}\n                description={index === current && <div className=\"steps-content\"><StepDescription /></div>}\n              />\n          })}\n        </Steps>\n        <div className=\"steps-action\">\n          {current < steps.length - 1 && (\n            <Button type=\"primary\" onClick={next}>\n              Next\n            </Button>\n          )}\n          {current === steps.length - 1 && (\n            <Button\n              type=\"primary\"\n              onClick={() => message.success('Processing complete!')}\n            >\n              Done\n            </Button>\n          )}\n          {current > 0 && (\n            <Button style={{ margin: '0 8px' }} onClick={prev}>\n              Previous\n            </Button>\n          )}\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}